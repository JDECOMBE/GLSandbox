#version 430

struct InputStruct {
    float posX;
    float posY;
    float posZ;
    float colorX;
    float colorY;
    float colorZ;
    float scale;
    float randomValue;
    float ditheringFactor;
};

struct StatsStruct {
    int totalMeshes;
    int totalBillboards;
};

layout(local_size_x = 1) in;

layout (std430, binding=2)  buffer input_data {
    InputStruct[10000] data;
};

layout (std430, binding=3) writeonly buffer billboard_data {
    InputStruct[10000] billboards;
};

layout (std430, binding=4) writeonly buffer meshes_data {
    InputStruct[10000] meshes;
};

layout (std430, binding=5) writeonly buffer stats_data {
    int totalMeshes;
    int totalBillboards;
};

layout (location=1) uniform vec3 viewPosition;
layout (location=2) uniform float viewDistance;


void main() {
    uint index = gl_GlobalInvocationID.x;
    InputStruct inp = data[index];
    vec3 offset = vec3(inp.posX, inp.posY, inp.posZ);
    float random = inp.randomValue;
    
    float dMesh = (distance(offset, viewPosition) / viewDistance) * 0.9 + random * 0.1;
    if (dMesh < 1) {
        int mIndex = atomicAdd(totalMeshes, 1);
        data[index].ditheringFactor = smoothstep(0.9, 1f, dMesh) / 2f;
        meshes[mIndex] = data[index];
    }

    float dBillboard = (distance(offset, viewPosition) / viewDistance) * 1.0 + random * 0.1;
    if (dBillboard > 1) {
        int bIndex = atomicAdd(totalBillboards, 1);
        billboards[bIndex] = data[index];
    }
}
